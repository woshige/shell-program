1、${}用法
 （1）${变量#关键词} 若变量从头开始的数据符合关键词，则符合的数据最短删除
 （2）${变量##关键词} 若变量从尾部开始符合关键词，则符合的数据最长删除
 （3）${变量%关键词}  若变量从尾部向前符合关键词，则符合的数据最短删除
 （4）${变量%%关键词} 若变量从尾部向前符合关键词，则符合数据最长删除
 （5）${变量/旧字符串/新字符串}  若变量内容符合旧字符串则第一个旧字符串会被取代
 （6）${变量//旧字符串/新字符串} 若彼岸连内容符合旧字符串则全部符合的旧字符串会被全部替换
 （7）${#变量} 用来统计变量的长度
2、shell变量整数运算：
 expr $[] 和 $(()) 可以用来进行来进行整数运算  $()不可以用来计算
 expr $var1 + $var2  乘法 ：expr $var1 \* $var2
 $[var1 + var2]
 $((var1 + var2))
 

3、小数计算 bc
   awk 'BEGIN{print 1 /2}'
脚本练习：
    1、每一天的第一天备份并压缩/etc目录的所有的内容，存放到/root/bak的目录，存放的形式为 日期_etc.tar.gz
       #!/bin/bash
       DeskPath=/root/bak
       [ ! -d /root/bak ] && mkdir -p $DeskPath
       tar -czvf $DeskPath/$(date +%Y_%m_%d)_etc.tar.gz /etc

       crontab -e 
       00 23 1 * * 
4、流程控制语句if
   （1）句式
	     if [condition];then

	     fi


	     if [condition];then

	     else 

	     fi



	     if [codition];then

	     elif [condition];then

	     fi
   （2）if语句中的文件比较
          [condtion]
                   -e 文件和目录是否存在
                   -s 如果文件存在且至少有一个字符则为真
                   -d 如果文件存在且为目录则为真
                   -f 如果文件存在且为普通文件则为真
                   -r 如果文件存在且可读则为真
                   -w 如果文件存在且可写则为真
                   -x 如果文件存在且可执行则为真       
         实例：
             1)判断/etc/hosts文件是否存在
	               if [ -e /etc/hosts ];then
	                   echo "OK"
	               fi 
	         2)备份mysql，手动输入你需要备份的数据库名称  p19
	           a 提示用户手动输入 read
	           b 如果用户输入数据库名称，则执行mysqldump命令
	           c 备份到/root/backup/mysql
   （3）整数比对
           -eq  等于则条件为真
           -ne  不等于则为真
           -gt  大于则条件为真
           -lt  小于则条件为真
           -ge  大于等于则条件为真
           -le  小于等于则条件为真
         实例：编写一个脚本来判断服务是否是运行的
               a 判断服务是否运行   systemctl status sshd
               b 判断前者的命令执行结果
              查看磁盘当前使用状态，如果使用率超过80%，则进行报警

                #!/bin/bash
				disk_use=$(df -h | grep "/$" | awk '{print $(NF-1)}')
				echo ${disk_use%\%}
				if [ ${disk_use%\%} -ge 80 ];then
				    echo "您的磁盘使用率过高：${disk_use%\%}"
				else
				    echo "您的磁盘使用率正常：${disk_use%\%}"
				fi


    （4）字符串比较

           == 等于则为真
           != 不等于则为真
           -z 字符串长度为0为真
           -n 字符串长度不为空则为真
           str1 > str2 str1大于str2为真
           str1 < str2 str1小于str2为真

   （5）多个条件比较
         -a [ 1 -lt 2 -a 5 -gt 10]; echo $?  不成立
         -o [ 1 -lt 2  -o 5 -gt 10];echo $?


           根据学生的成绩判断学生的优劣

              1-59 补考
              60-80 合格
              80-100 优秀
              1）read读入学生的分数
              2）比较分数，看符合哪个条件


   （6）正则表达式
        [[ "$USER" =~ ^r ]];echo $?
        [[ "$USER" =~ oot$ ]];echo $?
        num=123
        [[ "$num" =~ ^[0-9]+ ]];echo $?
        例子：判断一个数是不是整数？
            #!/bin/bash
			read -p "please input a number" num
			if [[ $num =~ ^[-]?[0-9]+$ ]];then
			   echo "您输入的是一个整数"
			else
			   echo "您输入的不是一个整数"
			fi
        例子：写一个创建用户的脚本，需要输入创建用户的前缀，以及后缀
                #!/bin/bash
				read -p "请输入用户的前缀：" pre
				if [[ ! $pre =~ ^[a-Z]+$ ]];then
				   echo "您输入的用户前缀不是english"
				   exit 1
				fi
				read -p "请输入需要创建的用户的后缀" buttom
				if [[ $buttom =~ ^[0-9]+$ ]];then
				   user=${pre}${buttom}
				   id $user
				   if [ $? -eq 0 ];then
				     echo "该用户已经存在"
				   else
				     useradd $user
				     echo "用户创建成功${user}"
				   fi
				else
				   echo "输入的后缀的格式不正确"
				fi

	    例子：使用root用户清空/var/log/message日志，并且执行保留最近的100行
	          1）判断必须是root
	          2）判断文件必须存在 
	          3）清空后需要保留最近的100行  tail

	             eg：
	                #!/bin/bash
					# if [ $UID -eq 0 ];then
					if [ !$USER == "root" -o !$UID -eq 0 ];then
					   echo "您不是root用户"
					   exit 1
					else
					   if [ -f /var/log/message ];then
					       tail -n 100 /var/log/message > /root/backup/message.bak
					       cat /root/backup/message.bak > /var/log/message
					   else
					       echo "/var/log/message不存在"
					   fi
					fi

	    例子：判断httpd服务是否正常启动   文件名必须是httpd_daemon.sh 
	         1）服务是否是启动
	         2）服务启动端口是否是存在
	         3）对应的进程是否存在

	         status=$(systemctl status sshd | awk '/^.*Active/ {print $2}')
	         if [ $status == "active" ];then
	            sleep 1
	            echo "sshd服务监测是$status状态"
	         else
	            echo "sshd服务监测是$status"
	         fi
	         netstat -anp | grep sshd > /dev/null
	         if [ $? -eq 0 ];then
	            sleep 1
	            echo "服务端口存活"
	         else
	            echo "服务端口不存在"
	         fi
	         ps -aux | grep sshd | grep -v grep | grep -v pts> /dev/null
	         if[ $? -eq 0 ];then
	            sleep 1
	            echo "sshd服务进程存在"
	         else 
	            sleep
	            echo "sshd服务进程不存在"
	         fi




            #!/bin/bash
			sshd_status=$(systemctl status sshd | awk '/^.*Active/ {print $2}')
			if [ "$sshd_status" == "active" ];then
			   sleep 1
			   echo "服务正在运行"
			else
			   sleep 1
			   echo "服务状态为 $sshd_status"
			fi
			netstat -anp | grep sshd > /dev/null
			if [ $? -eq 0 ];then
			   sleep 1
			   echo "服务端口正在使用"
			else
			   sleep 1
			   echo "服务端口不存在"
			fi
			ps -aux | grep sshd | grep -v grep | grep -v pts > /dev/null
			if [ $? -eq 0 ];then
			   sleep 1
			   echo "sshd的服务进程存在"
			else
			   sleep 1
			   echo "sshd的服务进程不存在"
			fi
	    例子：
	        根据不同系统的版本来安装不同的yum源
	        version=$(awk '{print $(NF - 1)}' /etc/redhat-release)
	        echo ${version%%.*}
	    例子：安装不同版本的PHP
	         选择的过程，

